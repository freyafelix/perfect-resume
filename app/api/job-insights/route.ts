import { type NextRequest, NextResponse } from "next/server"

export async function POST(request: NextRequest) {
  try {
    const { jobDescription, insightType } = await request.json()

    if (!jobDescription) {
      return NextResponse.json({ error: "岗位描述不能为空" }, { status: 400 })
    }

    const apiKey = process.env.ECNU_API_KEY
    if (!apiKey) {
      return NextResponse.json({ error: "API密钥未配置" }, { status: 500 })
    }

    // 根据洞察类型构建不同的提示词
    const prompts = {
      explanation: `你是一位专业的职业咨询顾问，擅长把"故弄玄虚"、充满黑话的职位描述翻译成"大白话"。你的任务是把复杂的职位描述(JD)变成"跟朋友聊天"一样的语言，让完全没有行业经验的普通人一看就懂。

请分析用户提供的职位描述${jobDescription}，生成一个极度通俗、几乎口语化的版本。要求：
以“这个岗位是……”开头，直接陈述答案，不要有任何对话的开场白。

去掉内容中的黑话，改为说人话

以非常通俗易懂但又不强行改变原义的说法进行叙述。

想象以和朋友聊天的口吻介绍这份工作到底是在干嘛，让外行人一听就懂，快速理解工作内涵。

不要预设用户性别，不要用"哥们"，尽量客观

可以适当保留原句（原句用括号保留），但在后面进行通俗解释，使读者能保留对专业术语的体会。


足够通俗，让读者不需要深度思考就能够快速get工作需求、招聘什么样的人，知道可以大致准备什么，但不要为了通俗而通俗，强行改变原义。

去黑话可以参考：

- 将"营销策略为激活私域流量潜能，穿透公域流量渠道"转化为"在朋友圈、抖音和微博都投广告"
- 将"统筹协调线下会议场域，保障项目信息高效拉通对齐"转化为"这个项目的会议室都是我定的"
- 将"搭建了线上社交场域，用于沉淀用户，并实现了反馈闭环"转化为"拉了个用户反馈群"`,
      simulation: `你是一位入行多年的员工，请结合用户提供的职位描述${jobDescription}创建一个关于这个职位典型的"一天工作体验"，分享你一天，让求职者仿佛亲身经历了这个岗位的日常。

要求：

1. 以"XX真实一天"为标题，XX为职位名称
2. 采用故事化叙述风格，语气自然，让读者感同身受
3. 包含以下元素让内容生动真实：
    - 具体的工作场景和环境描述（不要太多）
    - 与同事的真实互动和对话片段
    - 工作中的小挑战或意外情况及解决过程
    - 工作中的情绪变化和思考过程
    - 1-2个专业决策或问题解决的具体例子
4. 你可以按时间顺序详细描述一个工作日的任务安排，如：
- **早上/上午安排**
[具体描述这段时间要完成的任务，说明具体做什么，避免笼统。]
- **中午/下午安排**
[具体描述这段时间可能的任务，清晰且有条理。]
- **晚上/额外安排**（如适用）
[描述加班或收尾工作，如总结或次日准备等。]
5. 注意事项：
    - 内容要基于JD合理推断，既不美化也不过度夸大工作压力
    - 融入行业特有的术语和工具，但要自然地解释它们
    - 避免空洞的职场套话，用具体例子和情境替代抽象描述
    - 注重内容质量而非数量，不要冗长

请创造一个既真实又引人入胜的工作日体验，让求职者读完后能发自内心地想："原来这就是做这份工作的感觉！"`,
      growth: `你是一位直言不讳的职业顾问，请基于用户提供的职位${jobDescription}，用最务实的视角评估这个职位是否值得入局。避免行业宣传和空话，提供求职者真正需要的信息。不需要加入“开始分析”之类的开场白，直接给内容即可。
从2个层面出发评价：

**一、行业入局价值（核心判断）**

请分析以下关键问题：

1. 入局价值判断：
    - 直接评估：这个职位是否真的值得追求？（高/中/低价值）
    - 就业前景：市场需求是增长还是萎缩？饱和度如何？
    - 稳定性评估：这个职位/行业在未来5年内是否有被淘汰或大幅缩减的风险？
2. 真实薪资与回报：
    - 不同级别的实际薪资范围（给出具体数字）
    - 与工作付出的性价比（高强度工作但薪资一般？还是轻松工作薪资可观？）
    - 薪资天花板在哪里？多久会遇到瓶颈？
3. 工作生活平衡(WLB)：
    - 典型工作时长和加班情况
    - 工作压力和倦怠风险评估
    - 行业特有的生活方式问题（频繁出差？高压截止日期？）
4. 现实晋升路径：
    - 实际晋升难度（容易/适中/困难）
    - 晋升所需的关键因素（能力vs人脉vs资历）
    - 职业瓶颈和转型可能性
5. 行业内幕：
    - 从业者不会公开说的行业问题
    - 不同规模公司的真实差异（初创/中小/大企业）
    - 入行门槛与实际竞争情况

请用直接、诚实的语言回答，帮助求职者了解这个职位的真实情况，做出明智决策。
引用最好给出来源和对应网址，保持准确性，不要夸大或歪曲事实。

**二、该JD是否挂羊头卖狗肉？**

请结合这份 JD 的描述，识别是否存在以下问题：

- 是否真正锻炼岗位核心能力（例如产品思维 / 技术技能），还是在打杂、做客服、运营边角料？
- 是否用"AI"、"产品"包装，但实为助理/执行/事务岗？
- 实际薪资是否合理？是否存在用高大上标签吸引低薪劳动力的现象？

请简要说明你识别到的情况，并打个「真实价值评级」：

【A级：核心岗位】【B级：可练手】【C级：打杂岗】【D级：避雷】

**🔚 最终一句总结建议（模版）：**

"这个行业方向【值得/不推荐】，而这个职位本身【是/不是】真正的××岗位，薪资水平【合理/偏低/存在误导】，整体建议是【可以练手 / 建议避开 / 适合纯新人】。"`,
      skills: `你是一个资深求职技能顾问，请基于该职位的描述${jobDescription}，为零基础求职者提供一份简洁实用、结构清晰的技能提升指南。请严格按照以下结构输出：

** 零基础学习与求职全攻略 **

一、核心技能（Top 3）

列出三项关键技能，每项包括：

- 技能名称：
- 简要解释（这是什么）：
- 为什么重要（工作中起什么作用）：
- 实际应用场景（简述用在工作哪一环节）：

二、零基础学习路径（岗位综合能力体系）

请分析岗位要求的整体能力体系，为零基础用户设计完整的学习路径，涵盖所有必要技能（不仅限于前三项核心技能）。按优先级排序，每项技能包括：

- 技能名称：
    - 为什么需要学习这项技能：
    - 推荐学习资源（请仅推荐知名平台上有口碑的课程，如"Coursera上的XX课程"、"B站的XX教程"等，无需提供具体链接）：
    - 建议学习时间（如：每天1小时，持续2周）：
    - 掌握标准（学完后能做什么，如何验证掌握）：
    - 学习注意事项/避坑点：

三、实战项目推荐（2~3 个）

如该岗位适合入门者做项目提升，请推荐项目并列出以下信息：

- 项目名称：
- 项目目标（简述）：
- 完成周期（如：1~2 周）：
- 实现步骤叙述：
- 简历描述建议（含量化表达）：

四、常见面试题（3~4 个）

列出该岗位的高频面试题，并给出每题结构性的回答思路。

五、技能掌握 To-do 清单（按优先级排序）

列出求职者为胜任该岗位应掌握的所有关键内容：

- 技能1
- 技能2
- 技能3
- 项目1
- 面试准备…

请确保所有推荐的学习资源都是真实存在且易于获取的，不要提供具体URL链接，避免出现404错误。对于学习路径部分，请全面覆盖岗位所需的各项技能，而不仅仅关注核心技能。`,
    }

    const prompt = prompts[insightType as keyof typeof prompts] || prompts.explanation

    const response = await fetch("https://chat.ecnu.edu.cn/open/api/v1/chat/completions", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        Authorization: `Bearer ${apiKey}`,
      },
      body: JSON.stringify({
        messages: [
          {
            role: "system",
            content: "你是一个专业的职业规划师和HR专家，擅长分析岗位需求和职业发展。",
          },
          {
            role: "user",
            content: prompt,
          },
        ],
        model: "ecnu-plus",
        temperature: 0.8,
        stream: false,
      }),
    })

    if (!response.ok) {
      throw new Error(`API请求失败: ${response.status}`)
    }

    const data = await response.json()
    const content = data.choices[0]?.message?.content

    if (!content) {
      throw new Error("API返回内容为空")
    }

    return NextResponse.json({
      success: true,
      data: {
        type: insightType,
        content: content,
      },
    })
  } catch (error) {
    console.error("岗位洞察分析错误:", error)
    return NextResponse.json(
      {
        error: "分析过程中出现错误",
        details: error instanceof Error ? error.message : "未知错误",
      },
      { status: 500 },
    )
  }
}
